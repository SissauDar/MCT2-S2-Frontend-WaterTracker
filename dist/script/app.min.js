const dataAccess = (function() {


  const local = (function() {
    const getprogressByDate = function(date) {
      console.log('getprogressByDate');
      return [
        ['09:00', 100],
        ['12:00', 150],
        ['14:00', 200]
      ]
    };
    return {
      getprogressByDate: getprogressByDate
    };
  })();


  const api = function() {
    console.log('api');
    // Moet dezelfde functies hebben als local.
  };


  return {
    local: local,
    api: api
  };

})();
class ProgressTracker {
  constructor(options) {
    this.options = options;
    this.percentageValue = 0;
    this.currentProgress = [] //dataAccess[this.options.mode].getProgressOfToday || [];
    this.timerId = null;
    this.percentageRatio = 100 / this.options.dailyGoal;
    this.percentage = document.querySelector(`.${this.options.domRefs.percentage}`);
    this.timeStampHolder = document.querySelector(`.${this.options.domRefs.timeStampHolder}`);
    this.addButton = document.querySelector(`.${this.options.domRefs.addButton}`);
    this.currentGoalHolders = document.querySelectorAll(`.${this.options.domRefs.currentGoal}`);
    this.currentUnitsHolders = document.querySelectorAll(`.${this.options.domRefs.currentUnits}`);

    this.showUserOptions();

    this.restoreProgress();
    this.listenToNewLogging();
  }

  restoreProgress() {
    this.currentProgress = dataAccess[this.options.mode].getprogressByDate(new Date());

    for (const p of this.currentProgress) {
      this.updateProgress(p);
    }
    // this.updateProgress(this.cu);
  }

  updateProgress(newLogging = ['00:00', 0]) {
    //this.currentProgress.push(newLogging);
    this.showTimeStamp(newLogging[0]);

    const oldProgress = Number(this.percentage.innerText),
      newProgress = oldProgress + (newLogging[1] * this.percentageRatio);

    this.percentageValue = newProgress;

    if (this.timerId) {
      clearInterval(this.timerId);
    }

    let v = oldProgress;
    this.timerId = setInterval(() => {
      this.percentage.innerText = v;
      const animateWave = this.options.afterUpdate.bind(this, v);
      requestAnimationFrame(animateWave);
      if (v >= newProgress) {
        clearInterval(this.timerId);
      }
      v++;
    }, 16); // 1000 ms / 60 frames (/s) = 16ms/fr
    this.options.afterUpdate(newProgress); // When finished, pass the new progress.
  };

  showUserOptions() {
    console.log('Showing options');
    console.log(this.currentGoalHolders);
    for (const g of this.currentGoalHolders) {
      g.innerHTML = this.options.dailyGoal;
    }

    for (const u of this.currentUnitsHolders) {
      u.innerHTML = this.options.units;
    }
  }

  showTimeStamp(timeStamp) {
    console.log('hey');
    console.log(this.timeStampHolder);
    this.timeStampHolder.innerHTML += `<li class="c-time-stamp">${timeStamp}</li>`;
  }

  listenToNewLogging() {
    this.addButton.addEventListener('click', () => { // arrow functie omdat je buitenste scope wilt.
      console.log('Dataset is ', this.addButton.dataset.amount);
      const now = new Date();

      const time = `${now
        .getHours()
        .toString()
        .padStart(2, '0')}:${now
        .getMinutes()
        .toString()
        .padStart(2, '0')}
      `,

        // const time = `${now.getHours()}:${now.getMinutes()}`,
        amount = this.addButton.dataset.amount;
      this.updateProgress([time, amount]);
      //dataAccess[this.options.mode].saveLogging([time, amount]);
    });
  }


}
// Hoofdmodule
const uiBinding = (function() {

  // Submodule
  const wave = (function() {
    this.waveElement = null;
    const setup = function(waveClass) {
      console.log('setup');
      console.log(document.querySelector(`.${waveClass}`));
      this.waveElement = document.querySelector(`.${waveClass}`);
    };

    const updateWaveHeight = function(newPercentage) {
      console.log('updateWaveHeight');
      if (newPercentage > 100) newPercentage = 100;
      this.waveElement.style.transform = `translateY(${100-newPercentage}%)`
    };
    return {
      setup: setup,
      updateWaveHeight: updateWaveHeight
    };

  })();

  // Submodule
  const logging = (function() {
    this.addButton;

    const setup = function(buttonClass) {
      console.log('setup');
      this.addButton = document.querySelector(`.${buttonClass}`);
    };

    const enableAmountOptions = function() {
      console.log('enableAmountOptions');
      this.addButton.addEventListener('click', function() {
        console.log(this.dataset);
      });
    };

    return {
      setup: setup,
      enableAmountOptions: enableAmountOptions
    };
  })();


  return {
    wave: wave,
    logging: logging
  };
})();
(function() {
  console.log('ðŸ’§', 'https://www.youtube.com/watch?v=ARC1w1WWxGY');
  const options = {
    // - De eenheden van je doel.
    units: 'ml',
    // - De hoeveelheid van het dagelijks doel.
    dailyGoal: 1539,
    // - Of je met localStorage of een API wil werken.
    mode: 'local',
    // - Een array met classes voor:
    domRefs: {
      // 	- Het huidige percentage.
      percentage: 'js-amount',
      // 	- De tijdstippen.
      timeStampHolder: 'js-timestamps',
      // 	- De 'voeg toe'-knop.
      addButton: 'js-log',
      // 	- Een klasse voor elk element waarin de goal moet komen.
      currentGoal: 'js-goal',
      // 	- Een klasse voor elk element waarin de eenheden mogen komen.
      currentUnits: 'js-units'
    },
    // - Een callback-functie voor als we de hoeveelheid aangepast hebben.
    afterUpdate: function(newPercentage) {
      uiBinding.wave.updateWaveHeight(newPercentage);
      console.log('It has been updated!', newPercentage);
    }
  };

  document.addEventListener('DOMContentLoaded', () => {
    uiBinding.wave.setup('js-waves')
    uiBinding.logging.setup('js-log');
    uiBinding.logging.enableAmountOptions();
    new ProgressTracker(options);
  });


})();